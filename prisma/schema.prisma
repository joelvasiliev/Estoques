generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id                    String          @id @default(cuid())
  name                  String?         @default("")
  email                 String?         @unique
  image                 String?         @default("")
  emailVerified DateTime?
  current_subscription  String?         @default("")
  accounts              Account[]
  sessions              Session[]
  products              Product[]
  Order                 Order[]
}

model Product {
  id             String   @id @default(uuid())
  owner_id       String
  owner          User     @relation(fields: [owner_id], references: [id])
  name           String   @db.VarChar(50)
  description    String?   @db.VarChar(256)
  total_price    Int
  price_per_unit Int
  price_per      String
  amount_type    String
  amount         Int
  photos                Photo[] 
  videos                Video[]
  orders                Order[]
}

model Order {
  id         String  @id @default(uuid())
  product_id    String
  product       Product @relation(fields: [product_id], references: [id])
  user_id       String
  user          User @relation(fields: [user_id], references: [id])
  status        String
  payment_type  String
  amount        Int
  delivered     Boolean
  courier_id    String?

  created_at    DateTime @default(now())
}

model Photo {
  id     String  @id @default(cuid())
  url    String
  productId String
  product   Product    @relation(fields: [productId], references: [id])
}

model Video {
  id     String  @id @default(cuid())
  url    String
  productId String
  product   Product    @relation(fields: [productId], references: [id])
}